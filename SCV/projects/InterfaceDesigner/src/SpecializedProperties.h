#ifndef __SPECIALIZED_PROPERTIES_H__
#define __SPECIALIZED_PROPERTIES_H__

#include "Properties.h"

class CountersProperties : public Properties, public Singleton<CountersProperties> {
friend class Singleton<CountersProperties>;
public:
   ///////////////////////////////////////////////////////////
   virtual void setComponent(scv::Component *component);
   ///////////////////////////////////////////////////////////

   ///////////////////////////////////////////////////////////
   virtual void onValueChange(const std::string &title, const std::string &str);
   ///////////////////////////////////////////////////////////

protected:
   ///////////////////////////////////////////////////////////
   CountersProperties(void);
   virtual ~CountersProperties(void);
   ///////////////////////////////////////////////////////////

   static const std::string s_minValue;
   static const std::string s_maxVlaue;
   static const std::string s_startValue;
   static const std::string s_stepValue;
};

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

class StringsProperties : public Properties, public Singleton<StringsProperties> {
friend class Singleton<StringsProperties>;
public:
   ///////////////////////////////////////////////////////////
   virtual void setComponent(scv::Component *component);
   ///////////////////////////////////////////////////////////

   ///////////////////////////////////////////////////////////
   virtual void onValueChange(const std::string &title, const std::string &str);
   ///////////////////////////////////////////////////////////

protected:
   ///////////////////////////////////////////////////////////
   StringsProperties(void);
   virtual ~StringsProperties(void);
   ///////////////////////////////////////////////////////////

   static const std::string s_string;
};

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

class StatesProperties : public Properties, public Singleton<StatesProperties> {
friend class Singleton<StatesProperties>;
public:
   ///////////////////////////////////////////////////////////
   virtual void setComponent(scv::Component *component);
   ///////////////////////////////////////////////////////////

   ///////////////////////////////////////////////////////////
   virtual void onValueChange(const std::string &title, const std::string &str);
   virtual void onValueChange(const std::string &title, bool state);
   ///////////////////////////////////////////////////////////
      
protected:
   ///////////////////////////////////////////////////////////
   StatesProperties(void);
   virtual ~StatesProperties(void);
   ///////////////////////////////////////////////////////////

   static const std::string s_state;
   static const std::string s_string;
};

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

class InternalFrameProperties : public Properties, public Singleton<InternalFrameProperties> {
friend class Singleton<InternalFrameProperties>;
public:
   ///////////////////////////////////////////////////////////
   virtual void setComponent(scv::Component *component);
   ///////////////////////////////////////////////////////////

   ///////////////////////////////////////////////////////////
   virtual void onValueChange(const std::string &title, const std::string &str);
   ///////////////////////////////////////////////////////////
   
protected:
   ///////////////////////////////////////////////////////////
   InternalFrameProperties(void);
   virtual ~InternalFrameProperties(void);
   ///////////////////////////////////////////////////////////

   static const std::string s_width;
   static const std::string s_height;
   static const std::string s_title;
};

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

class ImageProperties : public Properties, public Singleton<ImageProperties> {
friend class Singleton<ImageProperties>;
public:
   ///////////////////////////////////////////////////////////
   virtual void setComponent(scv::Component *component);
   ///////////////////////////////////////////////////////////

   ///////////////////////////////////////////////////////////
   virtual void onValueChange(const std::string &title, const std::string &str);
   ///////////////////////////////////////////////////////////
  
protected:
   ///////////////////////////////////////////////////////////
   ImageProperties(void);
   virtual ~ImageProperties(void);
   ///////////////////////////////////////////////////////////

   static const std::string s_path;
};

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

class FrameProperties : public Properties, public Singleton<FrameProperties> {
friend class Singleton<FrameProperties>;
public:
   ///////////////////////////////////////////////////////////
   virtual void setComponent(scv::Component *component);
   ///////////////////////////////////////////////////////////

   ///////////////////////////////////////////////////////////
   virtual void onValueChange(const std::string &title, const std::string &str);
   ///////////////////////////////////////////////////////////

protected:
   ///////////////////////////////////////////////////////////
   FrameProperties(void);
   virtual ~FrameProperties(void);
   ///////////////////////////////////////////////////////////

   static const std::string s_width;
   static const std::string s_height;
   static const std::string s_title;
};

#endif //__SPECIALIZED_PROPERTIES_H__